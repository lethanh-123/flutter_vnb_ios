import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:html/parser.dart' as html_parser;
import 'package:print_bluetooth_thermal/print_bluetooth_thermal.dart';
import 'package:esc_pos_utils_plus/esc_pos_utils.dart';
import 'package:image/image.dart' as image;
import 'api_service.dart';
import 'preferences.dart';
import 'package:flutter/rendering.dart';
import 'dart:ui' as ui;

class InvoiceDetailScreen extends StatefulWidget {
  final String maPhieu;

  const InvoiceDetailScreen({Key? key, required this.maPhieu})
      : super(key: key);

  @override
  _InvoiceDetailScreenState createState() => _InvoiceDetailScreenState();
}

class _InvoiceDetailScreenState extends State<InvoiceDetailScreen> {
  late WebViewController _webViewController;
  String _contentHtml = "";
  final GlobalKey _repaintBoundaryKey = GlobalKey(); // Kh·ªüi t·∫°o bi·∫øn GlobalKey

  @override
  void initState() {
    super.initState();
    _webViewController = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted);
    _loadInvoiceDetails();
  }

  /// T·∫£i chi ti·∫øt h√≥a ƒë∆°n v√† hi·ªÉn th·ªã tr√™n WebView
  Future<void> _loadInvoiceDetails() async {
    try {
      String? keyChiNhanh = await Preferences.getKeyChiNhanh();
      String? userKeyApp = await Preferences.get_user_info("user_key_app");

      if (keyChiNhanh == null || userKeyApp == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng')),
        );
        return;
      }

      final response = await ApiService.callApi('in_phieu_xuat', {
        'key_chi_nhanh': keyChiNhanh,
        'user_key_app': userKeyApp,
        'ma_phieu': widget.maPhieu,
      });

      if (response != null && response['content'] != null) {
        setState(() {
          _contentHtml = response['content'];
        });

        _webViewController.loadHtmlString(_contentHtml);
        debugPrint("_contentHtml: $_contentHtml");
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt h√≥a ƒë∆°n')),
        );
      }
    } catch (e) {
      debugPrint('L·ªói khi t·∫£i chi ti·∫øt h√≥a ƒë∆°n: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói: $e')),
      );
    }
  }

  /// üñºÔ∏è Ch·ª•p ·∫£nh n·ªôi dung WebView v√† l·∫•y h√¨nh ·∫£nh Uint8List
  Future<Uint8List> _captureWebViewAsImage() async {
    try {
      // Ch·ªù cho ƒë·∫øn khi widget ƒë∆∞·ª£c d·ª±ng xong
      await Future.delayed(const Duration(milliseconds: 200));

      // T√¨m ƒë·ªëi t∆∞·ª£ng RenderRepaintBoundary
      RenderRepaintBoundary? boundary = _repaintBoundaryKey.currentContext
          ?.findRenderObject() as RenderRepaintBoundary?;
      if (boundary != null) {
        ui.Image image = await boundary.toImage(pixelRatio: 1.6);
        ByteData? byteData =
            await image.toByteData(format: ui.ImageByteFormat.png);
        if (byteData != null) {
          Uint8List imageBytes = byteData.buffer.asUint8List();
          debugPrint(
              "H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c ch·ª•p th√†nh c√¥ng, k√≠ch th∆∞·ªõc: ${imageBytes.length} bytes");
          return imageBytes;
        }
      }
    } catch (e) {
      debugPrint('L·ªói khi ch·ª•p h√¨nh ·∫£nh t·ª´ WebView: $e');
    }
    debugPrint('Kh√¥ng th·ªÉ l·∫•y h√¨nh ·∫£nh t·ª´ WebView');
    return Uint8List(0);
  }

  /// In h√≥a ƒë∆°n t·ª´ h√¨nh ·∫£nh WebView
  Future<void> _printInvoice() async {
    try {
      String? connectedPrinter = await Preferences.getMayin();
      if (connectedPrinter == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Kh√¥ng c√≥ m√°y in n√†o ƒë∆∞·ª£c k·∫øt n·ªëi')),
        );
        return;
      }

      CapabilityProfile profile = await CapabilityProfile.load();
      Generator generator = Generator(PaperSize.mm80, profile);
      List<int> bytes = [];

      Uint8List imageBytes = await _captureWebViewAsImage();
      if (imageBytes.isNotEmpty) {
        image.Image? img = image.decodeImage(imageBytes);
        if (img != null) {
          bytes += generator.image(img);
        } else {
          debugPrint("Kh√¥ng th·ªÉ gi·∫£i m√£ h√¨nh ·∫£nh t·ª´ WebView");
        }
      } else {
        debugPrint("Kh√¥ng th·ªÉ ch·ª•p h√¨nh ·∫£nh t·ª´ WebView");
      }

      // bytes += generator.text("In",
      //     styles: const PosStyles(bold: true, underline: true));
      bytes += generator.cut();

      final bool isConnected = await PrintBluetoothThermal.connectionStatus;
      if (!isConnected) {
        final bool connected = await PrintBluetoothThermal.connect(
            macPrinterAddress: connectedPrinter);
        if (!connected) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi m√°y in')),
          );
          return;
        }
      }

      final bool printSuccess = await PrintBluetoothThermal.writeBytes(bytes);
      if (printSuccess) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('In h√≥a ƒë∆°n th√†nh c√¥ng!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('L·ªói khi in h√≥a ƒë∆°n')),
        );
      }
    } catch (e) {
      debugPrint('L·ªói khi in h√≥a ƒë∆°n: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói khi in h√≥a ƒë∆°n: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Chi ti·∫øt h√≥a ƒë∆°n'),
        actions: [
          IconButton(
            icon: const Icon(Icons.print),
            onPressed: _printInvoice,
          ),
        ],
      ),
      body: RepaintBoundary(
        key: _repaintBoundaryKey, // G√°n _repaintBoundaryKey cho RepaintBoundary
        child: _contentHtml.isEmpty
            ? const Center(child: CircularProgressIndicator())
            : WebViewWidget(controller: _webViewController),
      ),
    );
  }
}
